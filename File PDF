import 'dart:async';
import 'dart:io';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:photo_view/photo_view.dart';
import 'package:photo_view/photo_view_gallery.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:shimmer/shimmer.dart';
import 'package:solar_icons/solar_icons.dart';
import '../../data/model/response_model/visual_aids_response_model.dart';
import '../../data/response/status.dart';
import '../../utils/button.dart';
import '../../utils/responsive/responsive_images.dart';
import '../../utils/responsive/responsive_sizes.dart';
import '../../utils/responsive/responsive_text.dart';
import '../../utils/screenWidgets /empty_widget.dart';
import '../../utils/screenWidgets /error_dialogue.dart';
import '../../utils/screenWidgets /loading_widget.dart';

import '../../view_models/afterLogin/visuals_viewmodel.dart';
import '../../view_models/beforeLogin/visuals_viewmodel.dart';
import '../../resources/app_colors.dart';
import '../../resources/constant_strings.dart';
import '../../views/presentation/addPresentationScreen.dart';

// ignore: must_be_immutable
class VisualAidsScreen extends StatefulWidget {
  VisualAidsScreen({required this.token, super.key});

  String? token;

  @override
  State<VisualAidsScreen> createState() => _VisualAidsScreenState();
}

class _VisualAidsScreenState extends State<VisualAidsScreen> {
  TextEditingController controller = TextEditingController();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      getData();
    });
  }

  Future<void> getData({bool isRefresh = false}) async {
    final visuals = Provider.of<VisualAidsViewModel>(context, listen: false);
    final guestVisuals = Provider.of<GuestVisualAidsViewModel>(context, listen: false);

    if (widget.token != null && widget.token!.isNotEmpty) {
      if (isRefresh || visuals.visualAids.isEmpty) {
        await visuals.fetchVisualAids();
      }
    } else {
      if (isRefresh || guestVisuals.visualAids.isEmpty) {
        await guestVisuals.fetchVisualAids();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.sizeOf(context).width <= 500;
    final myValue = Provider.of<VisualAidsViewModel>(context, listen: false);
    final guestVis = Provider.of<GuestVisualAidsViewModel>(context, listen: false);

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: true,
        title: Consumer2<GuestVisualAidsViewModel, VisualAidsViewModel>(
          builder: (context, v1, v2, _) {
            return ResponsiveText.getAppBarText(
              context,
              "${ConstantStrings.visualAidsscreenHeading} ${(v1.selectedVisualAids.isNotEmpty || v2.selectedVisualAids.isNotEmpty) ? '(${widget.token == null ? "${v1.selectedVisualAids.length}" : v2.selectedVisualAids.length})' : ''}",
            );
          },
        ),
        actions: [
          IconButton(
            onPressed: () async {
              if (guestVis.selectedVisualAids.isNotEmpty || myValue.selectedVisualAids.isNotEmpty) {
                await myValue.shareImageToWhatsApp(
                  context,
                  widget.token == null ? guestVis.selectedVisualAids : myValue.selectedVisualAids,
                );
                guestVis.clearSelection();
                myValue.clearSelection();
                setState(() {});
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("Please Add Visual Aids")),
                );
              }
            },
            icon: const Icon(Icons.share),
          ),
          if (widget.token != null && widget.token!.isNotEmpty)
            IconButton(
              onPressed: () {
                Provider.of<VisualAidsViewModel>(context, listen: false).downloadVisuals();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("Downloading visual aids...")),
                );
              },
              icon: ResponsiveImages.getAppBarIcon(context, SolarIconsOutline.downloadMinimalistic),
            ),
          if (widget.token != null && widget.token!.isNotEmpty)
            IconButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => AddPresentationScreen()),
                );
              },
              icon: ResponsiveImages.getAppBarIcon(context, SolarIconsOutline.galleryEdit),
            ),
          IconButton(
            onPressed: () {
              showModalBottomSheet(
                context: context,
                shape: const RoundedRectangleBorder(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(16.0)),
                ),
                backgroundColor: Colors.white,
                isScrollControlled: true,
                builder: (BuildContext context) {
                  return widget.token != null && widget.token!.isNotEmpty
                      ? ChangeNotifierProvider.value(
                    value: Provider.of<VisualAidsViewModel>(context, listen: false),
                    child: _buildFilterBottomSheet(context, myValue),
                  )
                      : ChangeNotifierProvider.value(
                    value: Provider.of<GuestVisualAidsViewModel>(context, listen: false),
                    child: _buildFilterBottomSheet(context, guestVis),
                  );
                },
              );
            },
            icon: const Icon(CupertinoIcons.slider_horizontal_3),
          ),
          const SizedBox(width: 2),
        ],
      ),
      body: widget.token != null && widget.token!.isNotEmpty
          ? RefreshIndicator(
        onRefresh: () => getData(isRefresh: true),
        child: Consumer<VisualAidsViewModel>(
          builder: (context, value, _) {
            switch (value.visualaidsList.status!) {
              case Status.loading:
                return const LoadingScreen();
              case Status.error:
                return Container(
                  color: AppColors.backgroundColor,
                  child: ErrorDialogue(message: value.visualaidsList.message),
                );
              case Status.completed:
                return _buildVisualAidsGrid(context, value, width, myValue);
            }
          },
        ),
      )
          : Consumer<GuestVisualAidsViewModel>(
        builder: (context, value, _) {
          switch (value.visualaidsList.status!) {
            case Status.loading:
              return const LoadingScreen();
            case Status.error:
              return Center(child: Text(value.visualaidsList.message.toString()));
            case Status.completed:
              return RefreshIndicator(
                onRefresh: () => getData(isRefresh: true),
                child: _buildVisualAidsGrid(context, value, width, guestVis),
              );
          }
        },
      ),
    );
  }

  Widget _buildFilterBottomSheet(BuildContext context, dynamic value) {
    return Container(
      height: MediaQuery.sizeOf(context).height * 0.8,
      width: MediaQuery.sizeOf(context).width,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.only(left: 20, top: 20),
            child: ResponsiveText.getProductNameText(context, 'Filters'),
          ),
          Divider(color: Colors.black.withOpacity(0.1)),
          Expanded(
            child: Row(
              children: [
                Container(
                  width: ResponsiveSizes.leftContainerWidth(context),
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.only(topLeft: Radius.circular(2)),
                  ),
                  child: ListView(
                    children: value.filterOptions.keys.map((category) {
                      final bool isSelected = category == value.selectedCategory;
                      final selectedCount = value.getSelectedCount(category);
                      return GestureDetector(
                        onTap: () => value.selectCategory(category),
                        child: Container(
                          color: isSelected ? AppColors.primaryColor : Colors.transparent,
                          child: ListTile(
                            title: Text(
                              '$category ${selectedCount == 0 ? '' : '($selectedCount)'}',
                              style: TextStyle(
                                color: isSelected ? Colors.white : Colors.black,
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ),
                VerticalDivider(color: Colors.black.withOpacity(0.1), width: 1),
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.only(left: 8.0, right: 8.0, bottom: 8.0),
                        child: TextField(
                          decoration: InputDecoration(
                            filled: true,
                            fillColor: AppColors.primaryColor.withOpacity(0.05),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: const BorderRadius.all(Radius.circular(15)),
                              borderSide: BorderSide(color: AppColors.backgroundColor),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderRadius: const BorderRadius.all(Radius.circular(15)),
                              borderSide: BorderSide(color: AppColors.backgroundColor),
                            ),
                            contentPadding: const EdgeInsets.all(10),
                            prefixIcon: ResponsiveImages.getAppBarIcon(context, SolarIconsOutline.magnifier),
                            border: InputBorder.none,
                            hintText: "Search",
                            hintStyle: const TextStyle(color: Colors.black38),
                          ),
                          onChanged: value.updateSearchText,
                        ),
                      ),
                      Expanded(
                        child: ListView(
                          padding: const EdgeInsets.only(left: 10),
                          children: value.getFilteredOptions().map((option) {
                            final isSelected = value.selectedFilters[value.selectedCategory]?.contains(option) == true;
                            return Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                FilterChip(
                                  label: ResponsiveText.getProductFilterTitle(context, option),
                                  backgroundColor: Colors.white,
                                  selectedColor: AppColors.primaryColor.withOpacity(0.05),
                                  selected: isSelected,
                                  onSelected: (_) => value.toggleFilterOption(value.selectedCategory, option),
                                ),
                              ],
                            );
                          }).toList(),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          Divider(color: Colors.black.withOpacity(0.1)),
          Container(
            padding: const EdgeInsets.only(bottom: 15, right: 20, left: 20, top: 10),
            color: Colors.white,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                OutlinedButton(
                  onPressed: value.clearFilters,
                  style: OutlinedButton.styleFrom(
                    backgroundColor: Colors.white,
                    shape: const RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10)),
                    ),
                  ),
                  child: Container(
                    padding: const EdgeInsets.all(15),
                    child: Text(
                      'Clear',
                      style: TextStyle(
                        color: Colors.black,
                        fontSize: ResponsiveText.getInputTextSize(context),
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                  ),
                ),
                Button(
                  onPress: () {
                    value.applyFilters();
                    Navigator.of(context).pop();
                  },
                  title: 'Apply',
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildVisualAidsGrid(BuildContext context, dynamic value, bool width, dynamic viewModel) {
    return Column(
      children: [
        if (value.isDownloading) ...[
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: LinearProgressIndicator(),
          ),
          Text('Downloading... ${(value.downloadProgress * 100).toStringAsFixed(0)}%'),
        ],
        Container(
          margin: const EdgeInsets.only(left: 10, right: 10),
          child: TextFormField(
            style: TextStyle(fontSize: ResponsiveText.getInputTextSize(context)),
            controller: controller,
            onChanged: (text) => viewModel.updateSearchText(text.toLowerCase()),
            decoration: InputDecoration(
              prefixIcon: ResponsiveImages.getSearchBarIcon(context, SolarIconsOutline.magnifier),
              border: InputBorder.none,
              hintText: "Search",
              hintStyle: const TextStyle(color: Colors.black38),
            ),
          ),
        ),
        Expanded(
          child: value.visualAids.isNotEmpty
              ? Container(
            margin: const EdgeInsets.only(left: 10, right: 10, top: 10),
            child: CustomScrollView(
              slivers: [
                SliverGrid(
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: width ? 2 : 3,
                    mainAxisSpacing: 10,
                    crossAxisSpacing: 10,
                    childAspectRatio: 1,
                  ),
                  delegate: SliverChildBuilderDelegate(
                        (context, index) {
                      final visual = value.visualAids[index];
                      final imageUrl = visual.url;
                      final isSelected = viewModel.isSelected(visual);
                      final thumbUrl = _getOptimizedImageUrl(
                        imageUrl!,
                        width: 200,
                        height: 200,
                      );

                      return InkWell(
                        onLongPress: () => viewModel.toggleSelection(visual),
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => ImagePage(
                                images: value.visualAids,
                                initialIndex: index,
                              ),
                            ),
                          );
                        },
                        child: Stack(
                          children: [
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(10),
                                boxShadow: [
                                  BoxShadow(
                                    color: AppColors.primaryColor.withOpacity(0.1),
                                    spreadRadius: 0.5,
                                    blurRadius: 2,
                                    offset: const Offset(0, 0),
                                  ),
                                ],
                              ),
                              child: ClipRRect(
                                borderRadius: BorderRadius.circular(10),
                                child: CachedNetworkImage(
                                  imageUrl: thumbUrl,
                                  cacheKey: imageUrl,
                                  memCacheWidth: 200,
                                  memCacheHeight: 200,
                                  fit: BoxFit.cover,
                                  placeholder: (context, url) => Shimmer.fromColors(
                                    baseColor: Colors.grey[300]!,
                                    highlightColor: Colors.grey[100]!,
                                    period: const Duration(milliseconds: 800),
                                    child: Container(color: Colors.white),
                                  ),
                                  errorWidget: (context, url, error) => Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    crossAxisAlignment: CrossAxisAlignment.center,
                                    children: [
                                      const Icon(CupertinoIcons.exclamationmark_circle_fill),
                                      const Text('Corrupt Image'),
                                      Text(visual.name ?? 'No Name'),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            if (isSelected)
                              Positioned(
                                top: 5,
                                right: 5,
                                child: Icon(
                                  CupertinoIcons.check_mark_circled_solid,
                                  color: AppColors.primaryColor,
                                ),
                              ),
                          ],
                        ),
                      );
                    },
                    childCount: value.visualAids.length,
                  ),
                ),
              ],
            ),
          )
              : const EmptyWidget(),
        ),
      ],
    );
  }

  String _getOptimizedImageUrl(String originalUrl, {int? width, int? height}) {
    final uri = Uri.parse(originalUrl);
    final newParams = Map<String, String>.from(uri.queryParameters)
      ..addAll({
        if (width != null) 'w': width.toString(),
        if (height != null) 'h': height.toString(),
        'q': '70', // Reduced quality for faster loading
        'auto': 'compress,format',
      });
    return uri.replace(queryParameters: newParams).toString();
  }
}


class ImagePage extends StatelessWidget {
  final dynamic images;
  final int initialIndex;

  ImagePage({
    required this.images,
    required this.initialIndex,
  });

  // @override
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _buildBody(context),
    );
  }

  Widget _buildBody(BuildContext context) {
    if (images is String) {
      return Center(
        child: PhotoView(
          imageProvider: CachedNetworkImageProvider(images),
          backgroundDecoration: const BoxDecoration(color: Colors.white),
          enableRotation: true,
        ),
      );
    } else if (images is List<VisualAids>) {
      return PhotoViewGallery.builder(
        itemCount: images.length,
        pageController: PageController(initialPage: initialIndex),
        builder: (context, index) {
          return PhotoViewGalleryPageOptions(
            imageProvider: CachedNetworkImageProvider(images[index].url!),
            heroAttributes: PhotoViewHeroAttributes(tag: images[index].url!),
          );
        },
        backgroundDecoration: const BoxDecoration(color: Colors.white),
      );
    } else {
      return Center(
        child: Image.asset(
          'assets/images/png/no_image.png',
        ),
      );
    }
  }
}
